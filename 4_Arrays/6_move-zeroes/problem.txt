Move Zeroes


Problem Statement:
*******************
Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note:
******
1. You must do this in-place without making a copy of the array.


Examples:
***********
Example 1:
Input: nums = [0, 1, 0, 3, 12]
Output: [1, 3, 12, 0, 0]

Example 2:
Input: nums = [0]
Output: [0]


Constraints:
*************
1. 1 <= nums.length <= 10^4
2. -2^31 <= prices[i] <= 10^4 - 1


Optimal Approach: Two Pointers
*****************
1. Initialize a pointer x=0
2. Loop through the array
3. If the current element is not 0, assign it to nums[x] and increment x
4. After the loop, from index x to the end of the array, fill all values with 0


Time Complexity:
*****************
1. Time Complexity = O(n)
2. One pass to shift non-zero elements
3. Another pass to fill in zeros


Space Complexity:
******************
1. Space Complexity = O(1)
2. In-place modifications with constant extra space.


Dry Run:
*********
nums = [0, 1, 0, 3, 12]
x = 0

i=0;  0 < 5 ==> true ==> 0 != 0 ==> false

i=1;  1 < 5 ==> true ==> 1 != 0 ==> true
nums[0] = nums[1]
nums = [1, 1, 0, 3, 12]
x=1

i=2;  2 < 5 ==> true ==> 0 != 0 ==> false

i=3;  3 < 5 ==> true ==> 3 != 0 ==> true
nums[1] = nums[3]
nums = [1, 3, 0, 3, 12]
x=2

i=4;  4 < 5 ==> true ==> 12 != 0 ==> true
nums[2] = nums[4]
nums = [1, 3, 12, 3, 12]
x=3

===================================================

nums = [1, 3, 12, 3, 12]
x = 3

j=3;  3 < 5 ==> true
nums[3] = 0
nums = [1, 3, 12, 0, 12]

j=4;  4 < 5 ==> true
nums[4] = 0
nums = [1, 3, 12, 0, 0]
