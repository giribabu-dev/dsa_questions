Best Time to Buy and Sell Stocks


Problem Statement:
*******************
You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.


Examples:
**********
Example 1:
Input: prices = [7, 1, 5, 3, 6, 4]
Output: 5
Explanation:
1. Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5

Example 2:
Input: prices = [7, 6, 4, 3, 1]
Output: 0
Explanation:
1. In this case, no transactions are done and the max profit = 0


Constraints:
*************
1. 1 <= prices.length <= 10^5
2. 0 <= prices[i] <= 10^4


Approach:
**********
1. Initialize two variables are minPrice = Infinity and maxProfit = 0
2. Loop through array. For each price in prices[]
3. If price < minPrice, then update minPrice as price
4. If profit (price - minPrice) is greater than maxProfit, then update maxProfit as profit
5. After the loop, return maxProfit


Dry Run:
*********
prices = [7, 6, 4, 3, 1]

minPrice = Infinity
maxProfit = 0


price = 7
(7 < Infinity)  => true  => minPrice = 7
(7 - 7) > 0  => false


price = 6
(6 < 7)  => true  => minPrice = 6
(6 - 6) > 0  => false


price = 4
(4 < 6)  => true  => minPrice = 4
(4 - 4) > 0  => false


price = 3
(3 < 4)  => true  => minPrice = 3
(3 -3) > 0  => false


price = 1
(1 < 3)  => true  => minPrice = 1
(1 - 1) > 0  => false


Final: return maxProfit = 0
