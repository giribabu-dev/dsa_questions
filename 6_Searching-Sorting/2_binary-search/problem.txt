Binary Search

Binary Search is an efficient algorithm used to find the position of a target value within a sorted array.
Unlike linear search, it repeatedly divides the search interval in half, significantly reducing the number of comparisons.


Example:
*********
Input: nums = [1, 3, 5, 7, 9]
target: 7
Output: 3


Approach:
**********
1. Set left = 0, right = nums.length - 1
2. While left <= right
   A. Calculate middle = Math.floor((left + right) / 2)
   B. If nums[middle] === target, return middle
   C. If target < nums[middle], discard the right half: 
        right = middle - 1
   D. Else, discard the left half:
        left = middle + 1
3. If the target is not found, return -1


Time Complexity:
******************
1. Best Case: O(1) - when the target is found at the middle initially
2. Worst Case: O(log n) - the array is halved every iteration


Space Complexity:
******************
1. O(1) - constant space is used (no additional data structures)


Dry Run:
*********
nums = [1, 3, 5, 7, 9]

target = 7

left = 0
right = 4


left <= right  => 0 <= 4;  true  => middle = 2

target === nums[middle]  => 7 === 5  => false
target < nums[2]  => 7 < 5  => false
left = 3


3 <= 4;  true  => middle = 3
target === nums[middle]  => 7 === 7  => true  => return middle

result = 3
